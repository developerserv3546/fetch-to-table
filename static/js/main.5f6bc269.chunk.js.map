{"version":3,"sources":["components/AddUser.js","components/EditableCell.js","utils/Constant.js","components/Table.js","App.js","utils/UserUtil.js","serviceWorker.js","index.js"],"names":["AddUser","props","useState","name","setName","username","setUsername","email","setEmail","street","setStreet","suite","setSuite","city","setCity","zipcode","setZipcode","phone","setPhone","website","setWebsite","companyName","setCompanyName","catchPhrase","setCatchPhrase","bs","setBS","className","scope","id","type","placeholder","value","onChange","e","target","colSpan","role","onClick","setAddUserMode","user","address","company","addUser","onSave","disabled","trim","length","EditableCell","isEditMode","setEditMode","data","setValue","onDoubleClick","editUser","cellKey","Table","rowSpan","isAddUserMode","users","map","el","key","App","isLoaded","setLoaded","setUsers","fetch","then","response","json","catch","error","console","log","hidden","newUsers","push","setUserValueByKey","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"sNAmFeA,MAjFf,SAAiBC,GAAQ,IAAD,EAEIC,mBAAS,IAFb,mBAEbC,EAFa,KAEPC,EAFO,OAGYF,mBAAS,IAHrB,mBAGbG,EAHa,KAGHC,EAHG,OAIMJ,mBAAS,IAJf,mBAIbK,EAJa,KAINC,EAJM,OAKQN,mBAAS,IALjB,mBAKbO,EALa,KAKLC,EALK,OAMMR,mBAAS,IANf,mBAMbS,EANa,KAMNC,EANM,OAOIV,mBAAS,IAPb,mBAObW,EAPa,KAOPC,EAPO,OAQUZ,mBAAS,IARnB,mBAQba,EARa,KAQJC,EARI,OASMd,mBAAS,IATf,mBASbe,EATa,KASNC,EATM,OAUUhB,mBAAS,IAVnB,mBAUbiB,EAVa,KAUJC,EAVI,OAWkBlB,mBAAS,IAX3B,mBAWbmB,EAXa,KAWAC,EAXA,OAYkBpB,mBAAS,IAZ3B,mBAYbqB,EAZa,KAYAC,EAZA,OAaAtB,mBAAS,IAbT,mBAabuB,EAba,KAaTC,EAbS,KAwCpB,OACI,oCACI,wBAAIC,UAAU,qBACV,wBAAIC,MAAM,OAAO3B,EAAM4B,IACvB,4BAAI,2BAAOC,KAAK,OAAOH,UAAU,eAAeI,YAAY,UAAUC,MAAO7B,EAClE8B,SAAU,SAAAC,GAAC,OAAI9B,EAAQ8B,EAAEC,OAAOH,WAC3C,4BAAI,2BAAOF,KAAK,OAAOH,UAAU,eAAeI,YAAY,cAAcC,MAAO3B,EACtE4B,SAAU,SAAAC,GAAC,OAAI5B,EAAY4B,EAAEC,OAAOH,WAC/C,4BAAI,2BAAOF,KAAK,OAAOH,UAAU,eAAeI,YAAY,WAAWC,MAAOzB,EACnE0B,SAAU,SAAAC,GAAC,OAAI1B,EAAS0B,EAAEC,OAAOH,WAC5C,4BAAI,2BAAOF,KAAK,OAAOH,UAAU,eAAeI,YAAY,YAAYC,MAAOvB,EACpEwB,SAAU,SAAAC,GAAC,OAAIxB,EAAUwB,EAAEC,OAAOH,WAC7C,4BAAI,2BAAOF,KAAK,OAAOH,UAAU,eAAeI,YAAY,WAAWC,MAAOrB,EACnEsB,SAAU,SAAAC,GAAC,OAAItB,EAASsB,EAAEC,OAAOH,WAC5C,4BAAI,2BAAOF,KAAK,OAAOH,UAAU,eAAeI,YAAY,UAAUC,MAAOnB,EAClEoB,SAAU,SAAAC,GAAC,OAAIpB,EAAQoB,EAAEC,OAAOH,WAC3C,4BAAI,2BAAOF,KAAK,OAAOH,UAAU,eAAeI,YAAY,cAAcC,MAAOjB,EACtEkB,SAAU,SAAAC,GAAC,OAAIlB,EAAWkB,EAAEC,OAAOH,WAC9C,4BAAI,2BAAOF,KAAK,OAAOH,UAAU,eAAeI,YAAY,WAAWC,MAAOf,EACnEgB,SAAU,SAAAC,GAAC,OAAIhB,EAASgB,EAAEC,OAAOH,WAC5C,4BAAI,2BAAOF,KAAK,OAAOH,UAAU,eAAeI,YAAY,aAAaC,MAAOb,EACrEc,SAAU,SAAAC,GAAC,OAAId,EAAWc,EAAEC,OAAOH,WAC9C,4BAAI,2BAAOF,KAAK,OAAOH,UAAU,eAAeI,YAAY,kBAAkBC,MAAOX,EAC1EY,SAAU,SAAAC,GAAC,OAAIZ,EAAeY,EAAEC,OAAOH,WAClD,4BAAI,2BAAOF,KAAK,OAAOH,UAAU,eAAeI,YAAY,kBAAkBC,MAAOT,EAC1EU,SAAU,SAAAC,GAAC,OAAIV,EAAeU,EAAEC,OAAOH,WAClD,4BAAI,2BAAOF,KAAK,OAAOH,UAAU,eAAeI,YAAY,QAAQC,MAAOP,EAChEQ,SAAU,SAAAC,GAAC,OAAIR,EAAMQ,EAAEC,OAAOH,YAE7C,wBAAIL,UAAU,YACV,wBAAIS,QAAQ,KAAKT,UAAU,4BACvB,yBAAKA,UAAU,+BAA+BU,KAAK,SAC/C,4BAAQC,QAAS,kBAAMrC,EAAMsC,gBAAe,IAAQZ,UAAU,gBAA9D,UACA,4BAAQW,QAAS,kBA1DtB,WACX,IAAME,EAAO,CACTX,GAAI5B,EAAM4B,GACV1B,KAAMA,EACNE,SAAUA,EACVE,MAAOA,EACPkC,QAAS,CACLhC,OAAQA,EACRE,MAAOA,EACPE,KAAMA,EACNE,QAASA,GAEbE,MAAOA,EACPE,QAASA,EACTuB,QAAS,CACLvC,KAAMkB,EACNE,YAAaA,EACbE,GAAIA,IAIZxB,EAAM0C,QAAQH,GAqCyBI,IAAUjB,UAAU,kBAAkBkB,UAAW1C,EAAK2C,OAAOC,QAApF,aC7CTC,MA5Bf,SAAsB/C,GAAQ,IAAD,EAESC,oBAAS,GAFlB,mBAElB+C,EAFkB,KAENC,EAFM,OAGChD,mBAASD,EAAMkD,MAHhB,mBAGlBnB,EAHkB,KAGXoB,EAHW,KAuBzB,OACI,wBAAIC,cAAe,kBAAMH,GAAY,KAASD,EAZ1C,6BACI,2BAAOnB,KAAK,OAAOH,UAAU,oBAAoBK,MAAOA,EACjDC,SAAU,SAACC,GAAD,OAAOkB,EAASlB,EAAEC,OAAOH,UAC1C,yBAAKL,UAAU,wCAAwCU,KAAK,SACxD,4BAAQC,QAAS,kBAAMY,GAAY,IAAQvB,UAAU,qBAArD,UACA,4BAAQW,QAAS,kBAX7BrC,EAAMqD,SAASrD,EAAM4B,GAAI5B,EAAMsD,QAASvB,QACxCkB,GAAY,IAUsCvB,UAAU,wBAAhD,UAO+C1B,EAAMkD,OC1B5DI,EACH,EADGA,EAEC,EAFDA,EAGF,EAHEA,EAID,EAJCA,EAKF,EALEA,EAMH,EANGA,EAOA,EAPAA,EAQF,EAREA,EASA,EATAA,EAUI,GAVJA,EAWI,GAXJA,EAYL,GCqDOC,MA5Df,SAAevD,GACX,OACI,2BAAO0B,UAAU,qBACb,2BAAOA,UAAU,cACjB,4BACI,wBAAIC,MAAM,MAAM6B,QAAQ,IAAI9B,UAAU,4BAAtC,KACA,wBAAIC,MAAM,MAAM6B,QAAQ,IAAI9B,UAAU,4BAAtC,QACA,wBAAIC,MAAM,MAAM6B,QAAQ,IAAI9B,UAAU,4BAAtC,YACA,wBAAIC,MAAM,MAAM6B,QAAQ,IAAI9B,UAAU,4BAAtC,SACA,wBAAIC,MAAM,MAAM6B,QAAQ,IAAIrB,QAAQ,IAAIT,UAAU,4BAAlD,WACA,wBAAIC,MAAM,MAAM6B,QAAQ,IAAI9B,UAAU,4BAAtC,SACA,wBAAIC,MAAM,MAAM6B,QAAQ,IAAI9B,UAAU,4BAAtC,WACA,wBAAIC,MAAM,MAAM6B,QAAQ,IAAIrB,QAAQ,IAAIT,UAAU,4BAAlD,YAEJ,4BACI,wBAAIA,UAAU,4BAAd,UACA,wBAAIA,UAAU,4BAAd,QACA,wBAAIA,UAAU,4BAAd,QACA,wBAAIA,UAAU,4BAAd,WACA,wBAAIA,UAAU,4BAAd,QACA,wBAAIA,UAAU,4BAAd,gBACA,wBAAIA,UAAU,4BAAd,QAGJ,+BACC1B,EAAMyD,cAAgB,kBAAC,EAAD,CACnBf,QAAS1C,EAAM0C,QACfd,GAAI5B,EAAM0D,MAAMZ,OAAS,EACzBR,eAAgBtC,EAAMsC,iBAAoB,KAC7CtC,EAAM0D,MAAMC,KAAI,SAACC,GACd,OACI,wBAAIC,IAAKD,EAAGhC,IACR,wBAAID,MAAM,OAAOiC,EAAGhC,IACpB,kBAAC,EAAD,CAAcA,GAAIgC,EAAGhC,GAAIsB,KAAMU,EAAG1D,KAAMoD,QAASA,EAAcD,SAAUrD,EAAMqD,WAC/E,kBAAC,EAAD,CAAczB,GAAIgC,EAAGhC,GAAIsB,KAAMU,EAAGxD,SAAUkD,QAASA,EACvCD,SAAUrD,EAAMqD,WAC9B,kBAAC,EAAD,CAAczB,GAAIgC,EAAGhC,GAAIsB,KAAMU,EAAGtD,MAAOgD,QAASA,EAAeD,SAAUrD,EAAMqD,WACjF,kBAAC,EAAD,CAAczB,GAAIgC,EAAGhC,GAAIsB,KAAMU,EAAGpB,QAAQhC,OAAQ8C,QAASA,EAC7CD,SAAUrD,EAAMqD,WAC9B,kBAAC,EAAD,CAAczB,GAAIgC,EAAGhC,GAAIsB,KAAMU,EAAGpB,QAAQ9B,MAAO4C,QAASA,EAC5CD,SAAUrD,EAAMqD,WAC9B,kBAAC,EAAD,CAAczB,GAAIgC,EAAGhC,GAAIsB,KAAMU,EAAGpB,QAAQ5B,KAAM0C,QAASA,EAC3CD,SAAUrD,EAAMqD,WAC9B,kBAAC,EAAD,CAAczB,GAAIgC,EAAGhC,GAAIsB,KAAMU,EAAGpB,QAAQ1B,QAASwC,QAASA,EAC9CD,SAAUrD,EAAMqD,WAC9B,kBAAC,EAAD,CAAczB,GAAIgC,EAAGhC,GAAIsB,KAAMU,EAAG5C,MAAOsC,QAASA,EAAeD,SAAUrD,EAAMqD,WACjF,kBAAC,EAAD,CAAczB,GAAIgC,EAAGhC,GAAIsB,KAAMU,EAAG1C,QAASoC,QAASA,EAAiBD,SAAUrD,EAAMqD,WACrF,kBAAC,EAAD,CAAczB,GAAIgC,EAAGhC,GAAIsB,KAAMU,EAAGnB,QAAQvC,KAAMoD,QAASA,EAC3CD,SAAUrD,EAAMqD,WAC9B,kBAAC,EAAD,CAAczB,GAAIgC,EAAGhC,GAAIsB,KAAMU,EAAGnB,QAAQnB,YAAagC,QAASA,EAClDD,SAAUrD,EAAMqD,WAC9B,kBAAC,EAAD,CAAczB,GAAIgC,EAAGhC,GAAIsB,KAAMU,EAAGnB,QAAQjB,GAAI8B,QAASA,EAAYD,SAAUrD,EAAMqD,kBCK5FS,MAvDf,WAAgB,IAAD,EAEmB7D,oBAAS,GAF5B,mBAEJ8D,EAFI,KAEMC,EAFN,OAGe/D,mBAAS,IAHxB,mBAGJyD,EAHI,KAGGO,EAHH,OAI6BhE,oBAAS,GAJtC,mBAIJwD,EAJI,KAIWnB,EAJX,KAkCX,OACI,yBAAKZ,UAAU,uBACX,yBAAKA,UAAU,4BACX,4BAAQA,UAAU,mBACVW,QAAS,WA/BzB6B,MAAM,4CACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAjB,GACFe,EAASf,GACTc,GAAU,GACV1B,GAAe,MAChBgC,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,QAyBYR,EAAoB,SAAT,QACjD,4BAAQrC,UAAU,mBAAmBW,QAAS,kBAAMC,GAAe,IAAOoC,OAAQjB,EAC1Eb,UAAWmB,GADnB,aAIJ,6BACI,kBAAC,EAAD,CACIL,MAAOA,EACPD,cAAeA,EACff,QArBA,SAACH,GACb,IAAMoC,EAAQ,YAAOjB,GACrBiB,EAASC,KAAKrC,GACd0B,EAASU,GACTrC,GAAe,IAkBHe,SAhCC,SAACzB,EAAIiC,EAAK9B,GACvB,IAAM4C,EAAWjB,EAAMC,KAAI,SAAAC,GAIvB,OAHIA,EAAGhC,KAAOA,GCtBO,SAACgC,EAAIC,EAAK9B,GACvC,OAAQ8B,GACJ,KAAKP,EACDM,EAAG1D,KAAO6B,EACV,MACJ,KAAKuB,EACDM,EAAGxD,SAAW2B,EACd,MACJ,KAAKuB,EACDM,EAAGtD,MAAQyB,EACX,MACJ,KAAKuB,EACDM,EAAGpB,QAAQhC,OAASuB,EACpB,MACJ,KAAKuB,EACDM,EAAGpB,QAAQ9B,MAAQqB,EACnB,MACJ,KAAKuB,EACDM,EAAGpB,QAAQ5B,KAAOmB,EAClB,MACJ,KAAKuB,EACDM,EAAGpB,QAAQ1B,QAAUiB,EACrB,MACJ,KAAKuB,EACDM,EAAG5C,MAAQe,EACX,MACJ,KAAKuB,EACDM,EAAG1C,QAAUa,EACb,MACJ,KAAKuB,EACDM,EAAGnB,QAAQvC,KAAO6B,EAClB,MACJ,KAAKuB,EACDM,EAAGnB,QAAQnB,YAAcS,EACzB,MACJ,QACI6B,EAAGnB,QAAQjB,GAAKO,GDbZ8C,CAAkBjB,EAAIC,EAAK9B,GAExB6B,KAEXK,EAASU,IA0BGrC,eAAgBA,OE3ChBwC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdtB,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMsB,a","file":"static/js/main.5f6bc269.chunk.js","sourcesContent":["import React, {useState} from \"react\";\n\nfunction AddUser(props) {\n\n    const [name, setName] = useState('');\n    const [username, setUsername] = useState('');\n    const [email, setEmail] = useState('');\n    const [street, setStreet] = useState('');\n    const [suite, setSuite] = useState('');\n    const [city, setCity] = useState('');\n    const [zipcode, setZipcode] = useState('');\n    const [phone, setPhone] = useState('');\n    const [website, setWebsite] = useState('');\n    const [companyName, setCompanyName] = useState('');\n    const [catchPhrase, setCatchPhrase] = useState('');\n    const [bs, setBS] = useState('');\n\n    const onSave = () => {\n        const user = {\n            id: props.id,\n            name: name,\n            username: username,\n            email: email,\n            address: {\n                street: street,\n                suite: suite,\n                city: city,\n                zipcode: zipcode\n            },\n            phone: phone,\n            website: website,\n            company: {\n                name: companyName,\n                catchPhrase: catchPhrase,\n                bs: bs\n            }\n        };\n\n        props.addUser(user);\n    };\n\n\n    return (\n        <>\n            <tr className=\"border-0 no-hover\">\n                <th scope=\"row\">{props.id}</th>\n                <td><input type=\"text\" className=\"form-control\" placeholder=\"Name...\" value={name}\n                           onChange={e => setName(e.target.value)}/></td>\n                <td><input type=\"text\" className=\"form-control\" placeholder=\"Username...\" value={username}\n                           onChange={e => setUsername(e.target.value)}/></td>\n                <td><input type=\"text\" className=\"form-control\" placeholder=\"Email...\" value={email}\n                           onChange={e => setEmail(e.target.value)}/></td>\n                <td><input type=\"text\" className=\"form-control\" placeholder=\"Street...\" value={street}\n                           onChange={e => setStreet(e.target.value)}/></td>\n                <td><input type=\"text\" className=\"form-control\" placeholder=\"Suite...\" value={suite}\n                           onChange={e => setSuite(e.target.value)}/></td>\n                <td><input type=\"text\" className=\"form-control\" placeholder=\"City...\" value={city}\n                           onChange={e => setCity(e.target.value)}/></td>\n                <td><input type=\"text\" className=\"form-control\" placeholder=\"Zip Code...\" value={zipcode}\n                           onChange={e => setZipcode(e.target.value)}/></td>\n                <td><input type=\"text\" className=\"form-control\" placeholder=\"Phone...\" value={phone}\n                           onChange={e => setPhone(e.target.value)}/></td>\n                <td><input type=\"text\" className=\"form-control\" placeholder=\"Website...\" value={website}\n                           onChange={e => setWebsite(e.target.value)}/></td>\n                <td><input type=\"text\" className=\"form-control\" placeholder=\"Company Name...\" value={companyName}\n                           onChange={e => setCompanyName(e.target.value)}/></td>\n                <td><input type=\"text\" className=\"form-control\" placeholder=\"Catch Phrase...\" value={catchPhrase}\n                           onChange={e => setCatchPhrase(e.target.value)}/></td>\n                <td><input type=\"text\" className=\"form-control\" placeholder=\"BS...\" value={bs}\n                           onChange={e => setBS(e.target.value)}/></td>\n            </tr>\n            <tr className=\"no-hover\">\n                <td colSpan=\"13\" className=\"text-center align-middle\">\n                    <div className=\"btn-group btn-group mw-200px\" role=\"group\">\n                        <button onClick={() => props.setAddUserMode(false)} className=\"btn btn-dark\">Cancel</button>\n                        <button onClick={() => onSave()} className=\"btn btn-success\" disabled={!name.trim().length}>Save</button>\n                    </div>\n                </td>\n            </tr>\n        </>\n    );\n};\n\nexport default AddUser;","import React, {useState} from \"react\";\n\nfunction EditableCell(props) {\n\n    const [isEditMode, setEditMode] = useState(false);\n    const [value, setValue] = useState(props.data);\n\n    const onClickSave = () => {\n        props.editUser(props.id, props.cellKey, value);\n        setEditMode(false);\n    };\n\n    const showEditMode = () => {\n        return (\n            <div>\n                <input type=\"text\" className=\"form-control mb-1\" value={value}\n                       onChange={(e) => setValue(e.target.value)}/>\n                <div className=\"btn-group btn-group-sm w-100 mw-200px\" role=\"group\">\n                    <button onClick={() => setEditMode(false)} className=\"w-50 btn btn-dark\">Cancel</button>\n                    <button onClick={() => onClickSave()} className=\"w-50 btn btn-success\">Save</button>\n                </div>\n            </div>\n        );\n    };\n\n    return (\n        <td onDoubleClick={() => setEditMode(true)}>{!isEditMode ? props.data : showEditMode()}</td>\n    );\n};\n\nexport default EditableCell;","export const cellKey = {\n    name: 1,\n    username: 2,\n    email: 3,\n    street: 4,\n    suite: 5,\n    city: 6,\n    zipcode: 7,\n    phone: 8,\n    website: 9,\n    companyName: 10,\n    catchPhrase: 11,\n    bs: 12\n};","import React from \"react\";\nimport AddUser from \"./AddUser\";\nimport EditableCell from \"./EditableCell\";\nimport {cellKey} from '../utils/Constant';\n\nfunction Table(props) {\n    return (\n        <table className=\"table table-hover\">\n            <thead className=\"thead-dark\">\n            <tr>\n                <th scope=\"col\" rowSpan=\"2\" className=\"text-center align-middle\">#</th>\n                <th scope=\"col\" rowSpan=\"2\" className=\"text-center align-middle\">Name</th>\n                <th scope=\"col\" rowSpan=\"2\" className=\"text-center align-middle\">Username</th>\n                <th scope=\"col\" rowSpan=\"2\" className=\"text-center align-middle\">Email</th>\n                <th scope=\"col\" rowSpan=\"1\" colSpan=\"4\" className=\"text-center align-middle\">Address</th>\n                <th scope=\"col\" rowSpan=\"2\" className=\"text-center align-middle\">Phone</th>\n                <th scope=\"col\" rowSpan=\"2\" className=\"text-center align-middle\">Website</th>\n                <th scope=\"col\" rowSpan=\"1\" colSpan=\"3\" className=\"text-center align-middle\">Company</th>\n            </tr>\n            <tr>\n                <th className=\"text-center align-middle\">Street</th>\n                <th className=\"text-center align-middle\">Suit</th>\n                <th className=\"text-center align-middle\">City</th>\n                <th className=\"text-center align-middle\">Zipcode</th>\n                <th className=\"text-center align-middle\">Name</th>\n                <th className=\"text-center align-middle\">Catch Phrase</th>\n                <th className=\"text-center align-middle\">BS</th>\n            </tr>\n            </thead>\n            <tbody>\n            {props.isAddUserMode ? <AddUser\n                addUser={props.addUser}\n                id={props.users.length + 1}\n                setAddUserMode={props.setAddUserMode}/> : null}\n            {props.users.map((el) => {\n                return (\n                    <tr key={el.id}>\n                        <th scope=\"row\">{el.id}</th>\n                        <EditableCell id={el.id} data={el.name} cellKey={cellKey.name} editUser={props.editUser}/>\n                        <EditableCell id={el.id} data={el.username} cellKey={cellKey.username}\n                                      editUser={props.editUser}/>\n                        <EditableCell id={el.id} data={el.email} cellKey={cellKey.email} editUser={props.editUser}/>\n                        <EditableCell id={el.id} data={el.address.street} cellKey={cellKey.street}\n                                      editUser={props.editUser}/>\n                        <EditableCell id={el.id} data={el.address.suite} cellKey={cellKey.suite}\n                                      editUser={props.editUser}/>\n                        <EditableCell id={el.id} data={el.address.city} cellKey={cellKey.city}\n                                      editUser={props.editUser}/>\n                        <EditableCell id={el.id} data={el.address.zipcode} cellKey={cellKey.zipcode}\n                                      editUser={props.editUser}/>\n                        <EditableCell id={el.id} data={el.phone} cellKey={cellKey.phone} editUser={props.editUser}/>\n                        <EditableCell id={el.id} data={el.website} cellKey={cellKey.website} editUser={props.editUser}/>\n                        <EditableCell id={el.id} data={el.company.name} cellKey={cellKey.companyName}\n                                      editUser={props.editUser}/>\n                        <EditableCell id={el.id} data={el.company.catchPhrase} cellKey={cellKey.catchPhrase}\n                                      editUser={props.editUser}/>\n                        <EditableCell id={el.id} data={el.company.bs} cellKey={cellKey.bs} editUser={props.editUser}/>\n                    </tr>\n                );\n            })}\n            </tbody>\n        </table>\n    );\n};\n\nexport default Table;","import React, {useState} from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport Table from \"./components/Table\";\nimport {setUserValueByKey} from './utils/UserUtil'\n\nfunction App() {\n\n    const [isLoaded, setLoaded] = useState(false);\n    const [users, setUsers] = useState([]);\n    const [isAddUserMode, setAddUserMode] = useState(false);\n\n    const loadUsers = () => {\n        fetch('https://jsonplaceholder.cypress.io/users')\n            .then(response => response.json())\n            .then(data => {\n                setUsers(data);\n                setLoaded(true);\n                setAddUserMode(false);\n            }).catch(error => console.log(error))\n    };\n\n    const editUser = (id, key, value) => {\n        const newUsers = users.map(el => {\n            if (el.id === id) {\n                setUserValueByKey(el, key, value);\n            }\n            return el;\n        });\n        setUsers(newUsers);\n    };\n\n    const addUser = (user) => {\n        const newUsers = [...users];\n        newUsers.push(user);\n        setUsers(newUsers);\n        setAddUserMode(false);\n    };\n\n\n    return (\n        <div className=\"container-fluid p-0\">\n            <div className=\"text-center align-middle\">\n                <button className=\"btn btn-dark m-1\"\n                        onClick={() => loadUsers()}>{!isLoaded ? 'Load' : 'Reload'}</button>\n                <button className=\"btn btn-dark m-1\" onClick={() => setAddUserMode(true)} hidden={isAddUserMode}\n                        disabled={!isLoaded}>Add User\n                </button>\n            </div>\n            <div>\n                <Table\n                    users={users}\n                    isAddUserMode={isAddUserMode}\n                    addUser={addUser}\n                    editUser={editUser}\n                    setAddUserMode={setAddUserMode}/>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","import {cellKey} from \"./Constant\";\n\nexport const setUserValueByKey = (el, key, value) => {\n    switch (key) {\n        case cellKey.name:\n            el.name = value;\n            break;\n        case cellKey.username:\n            el.username = value;\n            break;\n        case cellKey.email:\n            el.email = value;\n            break;\n        case cellKey.street:\n            el.address.street = value;\n            break;\n        case cellKey.suite:\n            el.address.suite = value;\n            break;\n        case cellKey.city:\n            el.address.city = value;\n            break;\n        case cellKey.zipcode:\n            el.address.zipcode = value;\n            break;\n        case cellKey.phone:\n            el.phone = value;\n            break;\n        case cellKey.website:\n            el.website = value;\n            break;\n        case cellKey.companyName:\n            el.company.name = value;\n            break;\n        case cellKey.catchPhrase:\n            el.company.catchPhrase = value;\n            break;\n        default:\n            el.company.bs = value;\n    }\n};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}